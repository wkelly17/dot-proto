---
import Layout from "../layouts/Layout.astro";
import type { IVidWithCustom } from "@customTypes/types";
// import videojs from "video.js";

// import key from "../../brightcove-auth-keys/private.pem";

// import {Thumbnail} from "../components/Thumbnail";
// import {VideoJs} from "../components/Video";
// import {DownloadToggle} from "../components/DownloadToggle";
// import {Sidebar} from "../components/Sidebar";
import {
  convertToValidFilename,
  formatDuration,
  getMp4DownloadSize,
  groupObjectsByKey,
} from "../utils";
import {Vid2} from "../components/VidTest2";
import {PlayerModuleImporter} from "../components/PlayerParent";
import { Header } from "@components/Header";
import { playbackApi } from "src/customTypes/Api";
import { VidPlayer } from "@components/VidPlayer";

const policyKey =
  "BCpkADawqM0bQiUyoSejARSlmKAaReqHw7sRy-4OFGmD8lb2ibVNF-d7H4wtYWIS8NMHOP-3IrfH1mVnUzhxQThtzvPBe-IUyk9EagJcJwWrbIBBCg1tsi8vJFv7_S6GGiTNhDwXFJfwF_W-";
const pbApi = new playbackApi({
  baseUrl: "https://edge.api.brightcove.com/playback/v1",
  baseApiParams: {
    // headers: [['Accept', `application/json;pk=${policyKey}`]]
    headers: {
      "Accept": `application/json;pk=${policyKey}`
    }
  }
})
const playbackBaseUrl = "https://edge.api.brightcove.com/playback/v1";
const accountId = "6314154063001";
const playListId = "1745043212224883810";
const {playlist} = Astro.params;
let data; 
try {
  const res = await pbApi.accounts.getPlaylistsByIdOrReferenceId(accountId, `ref:${playlist}`, {
    limit: 400, 
  })
  // const res = await pbApi.accounts.getPlaylistsByIdOrReferenceId(accountId, `${playListId}`, {
  //   limit: 400, 
  // })
  if (res.ok) {
    data = res.data
  } else {
    return new Response(404)
  }
} catch (error) {
  // console.error(error)
  return new Response(404)
}
// type coercion here to add a few extra types below on this vids array. 
const vids = data.videos as IVidWithCustom[]
if (!vids || !vids.length) {
  console.log("no vids")
  return new Response(404)
}
// const playableSources  = data.videos?
//   .map((vid: any) => {
//     return vid.sources.filter((src: any) => {
//       return src.container && src.container == "MP4";
//     });
//   })
//   .flat();

const sortedVids = vids.sort((a, b) =>  {
  // Given this pattern: ASE-X-BENINSL_63-1JN_1Jean_01.mp4
  // match 0 is entire string
  // match 1 is the sort order, 63 ((?:\d)
  // match 2 is the book (1Jean)
  // match 3 is the chapter.
  // optional extension on the end.
  const pattern =
    /^.*?(\d{2})-(?:\d)?[A-Z]{2,3}_(\d?.+?)_([0-9]{2,3})(?:\..+)?$/;

  if (!a || !b) return 0;
  // /^.*?(\d{2})-(?:0|1)?[A-Z]{2,3}_\d?(.+?)_([0-9]{2,3})(?:\..+)?$/;
  const ref1 = a.reference_id?.toUpperCase();
  const ref2 = b.reference_id?.toUpperCase();
  if (!ref1 || !ref2)  return 0
  const match = ref1.match(pattern);
  const match2 = ref2.match(pattern);
  if (!match || !match2) {
    return -1;
  }
  const sortA = Number(match[1]);
  const bookA = match[2];
  const chapterNumberA = Number(match[3]);
  const sortB = Number(match2[1]);
  const bookB = match2[2];
  const chapterNumberB = Number(match2[3]);
  a.book = a.book?.normalize() || bookA.normalize()
  b.book = b.book?.normalize() || bookB.normalize()
  a.chapNum = chapterNumberA
  b.chapNum = chapterNumberB

  let retVal;
  if (sortA == sortB) {
    retVal =
      chapterNumberA < chapterNumberB
        ? -1
        : chapterNumberA == chapterNumberB
        ? 0
        : 1;
  } else {
    retVal = sortA < sortB ? -1 : sortA == sortB ? 0 : 1;
  }

  // console.log({
  //   ref1,
  //   ref2,
  //   sortA,
  //   sortB,
  //   chapterNumberA,
  //   chapterNumberB,
  //   retVal,
  // });
  return retVal;
});

sortedVids.forEach((vid, idx) => {
  vid.originalIdx = idx;
  vid.slugName = convertToValidFilename(String(vid.name));
  // console.log(vid.book , vid.chapNum)
});

const book = Astro.url.searchParams.get('book')
const chapter = Astro.url.searchParams.get('chapter')
const bucketized = groupObjectsByKey<IVidWithCustom, "book">(sortedVids, "book");
// console.log({bucketized})
---

<Layout title="Welcome to Astro.">
<div class="grid grid-rows-[auto_1fr] h-screen sm:(h-auto)" sm="border border-red-400">
<Header/>
  <div
    class="grid grid-rows-[auto_auto_1fr] overflow-y-auto"
  
  >
    <!-- <div class="w-full md:w-3/4 top-0 aspect-video">
      <VideoJs client:only accountId={accountId} videos={sortedVids} />
    </div>  -->
    <PlayerModuleImporter client:only="solid-js">
      <VidPlayer vids={bucketized} book={book} chapter={chapter} playlist={playlist} client:load/>
      <!-- {
        sortedVids.map((vid) => {
          return (
            <div class="w-1/3">
              <p text="sm red">X</p>
              <Vid2 client:only vid={vid} />
            </div>
          );
        })
      } -->
    </PlayerModuleImporter>
  </div>
</div>
</Layout>
